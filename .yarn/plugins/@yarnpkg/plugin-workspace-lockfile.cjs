/* eslint-disable */
module.exports = {
name: "@yarnpkg/plugin-workspace-lockfile",
factory: function (require) {
var plugin;(()=>{"use strict";var e={d:(o,t)=>{for(var r in t)e.o(t,r)&&!e.o(o,r)&&Object.defineProperty(o,r,{enumerable:!0,get:t[r]})},o:(e,o)=>Object.prototype.hasOwnProperty.call(e,o),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},o={};e.r(o),e.d(o,{default:()=>i});const t=require("@yarnpkg/core"),r=require("@yarnpkg/cli"),a=require("@yarnpkg/fslib"),n=async(e,o,{cwd:a})=>{const n=await t.Configuration.find(a,(0,r.getPluginConfiguration)(),{lookup:t.ProjectLookup.MANIFEST}),{projectCwd:i}=n;n.values.set("cacheFolder",n.get("globalFolder")+"/cache"),n.values.set("enableMirror",!0),n.values.set("enableGlobalCache",!0);const s=await t.Cache.find(n),{project:c,workspace:l}=await t.Project.find(n,a);c.storedResolutions=new Map(e.storedResolutions);let p=new Set([l]);for(const e of p)for(const o of t.Manifest.hardDependencies)for(const t of e.manifest.getForScope(o).values()){const e=c.tryWorkspaceByDescriptor(t);null!==e&&p.add(e)}return await c.resolveEverything({cache:s,report:new t.ThrowReport}),await c.fetchEverything({cache:s,report:new t.ThrowReport}),c.generateLockfile()},i={configuration:{workspaceLockfiles:{description:"List of the workspaces that need a specific lockfile",type:t.SettingsType.STRING,default:!0,isArray:!0},workspaceLockfileName:{description:"Name of the workspaces specific lockfile",type:t.SettingsType.STRING,default:"yarn.lock-workspace"}},hooks:{afterAllInstalled:async e=>{const o=await t.Configuration.find(e.cwd,(0,r.getPluginConfiguration)()),i=o.values.get("workspaceLockfiles"),s=o.values.get("workspaceLockfileName");await t.StreamReport.start({configuration:o,stdout:process.stdout,includeLogs:!0},async o=>{const r=Array.isArray(i)?new Set(i.map(o=>e.getWorkspaceByIdent(t.structUtils.parseIdent(o)))):new Set(e.workspaces);for(const t of r){const r=a.ppath.join(t.cwd,s);await a.xfs.writeFilePromise(r,await n(e,0,t)),o.reportInfo(null,`${c="âœ“",`[32m${c}[0m`} Wrote ${r}`)}var c})}}};plugin=o})();
return plugin;
}
};