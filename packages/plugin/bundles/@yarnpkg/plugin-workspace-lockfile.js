/* eslint-disable */
module.exports = {
name: "@yarnpkg/plugin-workspace-lockfile",
factory: function (require) {
var plugin;(()=>{"use strict";var e={d:(r,t)=>{for(var o in t)e.o(t,o)&&!e.o(r,o)&&Object.defineProperty(r,o,{enumerable:!0,get:t[o]})},o:(e,r)=>Object.prototype.hasOwnProperty.call(e,r),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>i});const t=require("@yarnpkg/core"),o=require("@yarnpkg/cli"),a=require("@yarnpkg/fslib"),s=async(e,{cwd:r})=>{const{project:o,workspace:a}=await t.Project.find(e,r),s=await t.Cache.find(e);let i=new Set([a]);for(let e=o.workspaces.length-1;e>=0;e--){const r=o.workspaces[e];i.has(r)||o.workspaces.splice(e,1)}await o.resolveEverything({cache:s,report:new t.ThrowReport});for(const e of o.workspaces){const t=Array.from(o.originalPackages.values()).find(r=>r.identHash===e.locator.identHash);(null==t?void 0:t.reference.startsWith("workspace:"))&&e.cwd===r&&(t.reference="workspace:.",Array.from(o.storedDescriptors.values()).find(e=>e.identHash===t.identHash).range="workspace:.")}return o.generateLockfile()},i={configuration:{workspaceLockfiles:{description:"List of the workspaces that need a specific lockfile",type:t.SettingsType.STRING,default:!0,isArray:!0},workspaceLockfileName:{description:"Name of the workspaces specific lockfile",type:t.SettingsType.STRING,default:"yarn.lock-workspace"}},hooks:{afterAllInstalled:async e=>{const r=await t.Configuration.find(e.cwd,(0,o.getPluginConfiguration)()),i=r.values.get("workspaceLockfiles"),c=r.values.get("workspaceLockfileName");await t.StreamReport.start({configuration:r,stdout:process.stdout,includeLogs:!0},async o=>{const n=Array.isArray(i)?new Set(i.map(r=>e.getWorkspaceByIdent(t.structUtils.parseIdent(r)))):new Set(e.workspaces);for(const e of n){const t=a.ppath.join(e.cwd,c);await a.xfs.writeFilePromise(t,await s(r,e)),o.reportInfo(null,`${l="âœ“",`[32m${l}[0m`} Wrote ${t}`)}var l})}}};plugin=r})();
return plugin;
}
};