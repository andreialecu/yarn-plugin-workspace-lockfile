/* eslint-disable */
module.exports = {
name: "@yarnpkg/plugin-workspace-lockfile",
factory: function (require) {
var plugin;(()=>{"use strict";var e={d:(t,o)=>{for(var r in o)e.o(o,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:o[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{default:()=>n});const o=require("@yarnpkg/core"),r=require("@yarnpkg/cli"),a=require("@yarnpkg/fslib"),i=async({cwd:e})=>{const t=await o.Configuration.find(e,(0,r.getPluginConfiguration)(),{lookup:o.ProjectLookup.MANIFEST});t.triggerHook=async()=>{};const{project:a,workspace:i}=await o.Project.find(t,e),n=await o.Cache.find(t);await a.restoreInstallState({restoreResolutions:!1});let s=new Set([i]);for(const e of s)for(const t of o.Manifest.hardDependencies)for(const o of e.manifest.getForScope(t).values()){const e=a.tryWorkspaceByDescriptor(o);null!==e&&s.add(e)}return await a.install({cache:n,report:new o.ThrowReport,persistProject:!1}),a.generateLockfile()},n={configuration:{workspaceLockfiles:{description:"List of the workspaces that need a specific lockfile",type:o.SettingsType.STRING,default:!0,isArray:!0},workspaceLockfileName:{description:"Name of the workspaces specific lockfile",type:o.SettingsType.STRING,default:"yarn.lock-workspace"}},hooks:{afterAllInstalled:async e=>{const t=await o.Configuration.find(e.cwd,(0,r.getPluginConfiguration)()),n=t.values.get("workspaceLockfiles"),s=t.values.get("workspaceLockfileName");await o.StreamReport.start({configuration:t,stdout:process.stdout,includeLogs:!0},async t=>{const r=Array.isArray(n)?new Set(n.map(t=>e.getWorkspaceByIdent(o.structUtils.parseIdent(t)))):new Set(e.workspaces);for(const e of r){const o=a.ppath.join(e.cwd,s);await a.xfs.writeFilePromise(o,await i(e)),t.reportInfo(null,`${c="âœ“",`[32m${c}[0m`} Wrote ${o}`)}var c})}}};plugin=t})();
return plugin;
}
};